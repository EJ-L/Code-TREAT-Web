import { ProcessedResult, FilterOptions } from '../types';

export function processVulnerabilityDetection(rawData: any[], filters: FilterOptions): ProcessedResult[] {
  console.log('Processing vulnerability detection task:', {
    totalData: rawData.length,
    filters
  });

  // 尝试加载漏洞检测的JSON数据
  let vulDetectionData: any = {};
  try {
    // 直接从外部JSON文件加载数据
    // 在实际应用中，这应该使用fetch或类似方法从服务器获取
    vulDetectionData = require('../../../data/vulnerability-detection/detect_score.json');
    console.log('Loaded vulnerability detection data:', Object.keys(vulDetectionData).length, 'models');
  } catch (error) {
    console.error('Failed to load vulnerability detection data:', error);
    return [];
  }

  // 转换数据格式，生成ProcessedResult数组
  const results: ProcessedResult[] = [];
  
  // 遍历每个模型的数据
  Object.entries(vulDetectionData).forEach(([modelName, modelData]: [string, any]) => {
    // 创建一个包含所有指标的结果对象
    const result: ProcessedResult = {
      modelId: modelName,
      modelName: modelName,
      dataset: 'Vulnerability Detection',
      task: 'vulnerability detection',
      sourceLang: null,
      lang: 'Multiple',
      targetLang: null,
      // 初始化所有指标为null
      pass1: null,
      pass3: null,
      pass5: null,
      executionAccuracy: null,
      // 空的难度指标
      easyPass1: null,
      easyPass3: null,
      easyPass5: null,
      mediumPass1: null,
      mediumPass3: null,
      mediumPass5: null,
      hardPass1: null,
      hardPass3: null,
      hardPass5: null,
      codebleu: null,
      llmjudge: null,
      difficulty: null,
    };

    // 添加PrimeVul指标
    if (modelData.primevul) {
      result['Accuracy'] = modelData.primevul.accuracy !== null && modelData.primevul.accuracy !== undefined ? modelData.primevul.accuracy : null;
      result['Precision'] = modelData.primevul.precision !== null && modelData.primevul.precision !== undefined ? modelData.primevul.precision : null;
      result['Recall'] = modelData.primevul.recall !== null && modelData.primevul.recall !== undefined ? modelData.primevul.recall : null;
      result['F1 Score'] = modelData.primevul.f1 !== null && modelData.primevul.f1 !== undefined ? modelData.primevul.f1 : null;
    }
    
    // 添加PrimeVulPairs指标
    if (modelData.primevul_pair && modelData.primevul_pair.length > 1) {
      const pairStats = modelData.primevul_pair[1]; // 使用百分比数据
      result['P-C'] = pairStats['P-C'] !== null && pairStats['P-C'] !== undefined ? pairStats['P-C'] : null;
      result['P-V'] = pairStats['P-V'] !== null && pairStats['P-V'] !== undefined ? pairStats['P-V'] : null;
      result['P-B'] = pairStats['P-B'] !== null && pairStats['P-B'] !== undefined ? pairStats['P-B'] : null;
      result['P-R'] = pairStats['P-R'] !== null && pairStats['P-R'] !== undefined ? pairStats['P-R'] : null;
    }
    
    results.push(result);
  });
  
  console.log('生成的漏洞检测结果:', {
    totalModels: results.length,
    sampleResult: results[0]
  });

  // 应用过滤器
  let filteredResults = [...results];
  
  // 数据集过滤
  if (filters.datasets && filters.datasets.length > 0) {
    // 规范化数据集名称：转换为小写并移除所有空格
    const selectedDatasets = new Set(filters.datasets.map(d => d.toLowerCase().replace(/\s+/g, '')));
    console.log('应用漏洞检测数据集过滤:', {
      selectedDatasets: Array.from(selectedDatasets),
      totalResultsBefore: filteredResults.length,
      originalDatasets: filters.datasets
    });
    
    // 使用相同的规范化方法过滤数据集
    filteredResults = filteredResults.filter(result => {
      const normalizedDataset = result.dataset.toLowerCase().replace(/\s+/g, '');
      const isIncluded = selectedDatasets.has(normalizedDataset);
      console.log(`检查数据集匹配: ${result.dataset} -> ${normalizedDataset} = ${isIncluded}`);
      return isIncluded;
    });
    
    console.log('过滤后的漏洞检测结果:', {
      totalResults: filteredResults.length,
      remainingDatasets: [...new Set(filteredResults.map(r => r.dataset))]
    });
  }

  return filteredResults;
}

export function aggregateVulnerabilityDetectionResults(results: ProcessedResult[]): ProcessedResult[] {
  // 如果没有结果，直接返回空数组
  if (results.length === 0) return [];

  // 按模型名称分组
  const groupedByModel = new Map<string, ProcessedResult[]>();
  
  results.forEach(result => {
    if (!groupedByModel.has(result.modelName)) {
      groupedByModel.set(result.modelName, []);
    }
    groupedByModel.get(result.modelName)!.push(result);
  });
  
  // 合并每个模型的所有数据集结果
  return Array.from(groupedByModel.entries()).map(([modelName, modelResults]) => {
    console.log(`聚合${modelName}的漏洞检测结果:`, {
      totalResults: modelResults.length,
      datasets: modelResults.map(r => r.dataset)
    });
    
    // 创建基础结果对象
    const aggregatedResult: ProcessedResult = {
      modelId: modelName,
      modelName: modelName,
      dataset: modelResults.map(r => r.dataset).join(', '),
      task: 'vulnerability detection',
      sourceLang: null,
      lang: 'Multiple',
      targetLang: null,
      pass1: null,
      pass3: null,
      pass5: null,
      executionAccuracy: null,
      easyPass1: null,
      easyPass3: null,
      easyPass5: null,
      mediumPass1: null,
      mediumPass3: null,
      mediumPass5: null,
      hardPass1: null,
      hardPass3: null,
      hardPass5: null,
      codebleu: null,
      llmjudge: null,
      difficulty: null
    } as ProcessedResult;

    // 合并所有数据集的指标
    modelResults.forEach(result => {
      // 复制所有非空的指标
      Object.entries(result).forEach(([key, value]) => {
        if (value !== null && 
            ['P-C', 'P-V', 'P-B', 'P-R', 'Accuracy', 'Precision', 'Recall', 'F1 Score'].includes(key)) {
          (aggregatedResult as any)[key] = value;
        }
      });
    });
    
    return aggregatedResult;
  });
}

// 格式化模型名称以便更好地显示
function formatModelName(rawName: string): string {
  return rawName;
} 